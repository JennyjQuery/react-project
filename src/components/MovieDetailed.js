import React, {useEffect, useState} from "react";import {Col, Container, Row, Spinner, Button} from "react-bootstrap";import {getUsersAction} from "../store/actions/users";import {useSelector} from "react-redux";function MovieDetailed(props) {    const tableField = [        {value: 'release_date', name: 'Год производства'},/*выводит в формате 1995-10-20*/        {value: 'runtime', name: 'Время'},/*выводит в минутах*/        {value: 'production_countries', name: 'Страна'},/*массив {id,name}*/        {value: 'genres', name: 'Жанр'},/*массив {id,name}*/        {value: 'budget', name: 'Бюджет'},        {value: 'revenue', name: 'Сборы'},        {value: 'production_companies', name: 'Компании'},/*массив {id,name,logo_path}*/        {value: 'overview', name: 'Описание'},    ];    const COMPANIES = 'production_companies';    const OVERVIEW = 'overview';    const {data} = useSelector(state => state.movies.selectedMovie);    const isLoading = useSelector(state => state.movies.isLoading);    const [movie, setMovie] = useState({});    const [isHidden, setIsHidden] = useState(true);    useEffect(() => {        setMovie(state => ({            ...state,            ...data,            release_date: new Date(data.release_date).getFullYear(),            runtime: getRuntime(data.runtime),            budget: getCurrency(data.budget),            revenue: getCurrency(data.revenue)        }));        setIsHidden(true)    }, [data]);    const getCurrency = (value) => {        if (!value) return '-';        return value.toLocaleString('en-US', {            style: 'currency',            currency: 'USD',            maximumSignificantDigits: 3        })    };    const getRuntime = (minutes) => {        let hour = Math.trunc(minutes / 60);        let min = (minutes - hour * 60);        return `${minutes} мин. / ${hour < 10 ? `0${hour}` : hour}:${min < 10 ? `${min}0` : min}`    };    const test = () => {        console.log(isHidden)        /*        setMoreOverview((prevState) => ({                    moreOverview: !prevState.moreOverview                }));*/    };    const displayList = (array, item, index) => {        return (index - (array.length - 1)) ? item.name + ' / ' : item.name + ' ';    };    const List = (props) => {        return (            <span>                {                    props.array.map((item, index) => {                        return (                            <span key={index}>{displayList(props.array, item, index)}</span>                        );                    })                }            </span>        )    };    const CompaniesList = (props) => {        return (            <div className={'companies-list'}>                {                    props.array.map(item => {                        return item.logo_path ? <img src={"https://image.tmdb.org/t/p/w185" + item.logo_path}                                                     alt={'company-logo'}/> : <div>{item.name}</div>                    })                }            </div>        )    };    const ArrayBlock = (props) => {        switch (props.type) {            case COMPANIES: {                return <CompaniesList array={props.array}/>            }            default: {                return <List array={props.array}/>            }        }    };    const isHighRating = () => {        return movie.vote_average > 7    };    const TextBlock = (props) => {        switch (props.type) {            case OVERVIEW: {                return (<React.Fragment>                        {props.value}                        <button onClick={() => setIsHidden(false)}/>                    </React.Fragment>                )            }            default: {                return (<React.Fragment>{props.value}</React.Fragment>)            }        }    };    const content = (        <Container>            <Row>                <Col style={{position: 'relative'}} lg={4}>                    <h2>{movie.title}</h2>                    <p>{movie.original_title}</p>                    <img src={"https://image.tmdb.org/t/p/w185" + movie.backdrop_path} alt={'movie-poster'}/>                    <h3 style={{position: 'absolute', right: '70px'}}                        className={`rating-${isHighRating ? "high" : "small"}`}>{movie.vote_average}</h3>                    <div style={{display: "flex", alignItems: 'baseline'}}>                        <Button style={{marginTop: '10px'}}>+ Буду смотреть</Button>                      {/*  <Button className={'planned-button'}>(-)</Button>*/}                    </div>                </Col>                <Col>                    <h5>О фильме</h5>                    <table>                        <tbody>                        {                            tableField.map((field, index) => {                                return (                                    <React.Fragment>                                        <tr key={index}>                                            <th className={'th-title'}>{field.name}</th>                                            <th className={`th-value ${isHidden && field.value === OVERVIEW ? 'hidden-tr' : 'not-hidden-tr'}`}>                                                {                                                    Array.isArray(movie[field.value]) ?                                                        <ArrayBlock array={movie[field.value]} type={field.value}/> :                                                        <TextBlock value={movie[field.value]} type={field.value}/>                                                }                                            </th>                                        </tr>                                        <hr></hr>                                    </React.Fragment>                                )                            })                        }                        </tbody>                    </table>{/*                    <button onClick={test}>ТЕСТ</button>*/}                    {                        movie.homepage ? <Button variant="outline-primary" onClick={()=>(window.open(movie.homepage))}>Перейти на страницу фильма</Button> : null                    }                </Col>            </Row>        </Container>);    return (        <React.Fragment>            {                isLoading ? <Spinner animation="border" role="status"/> : content            }        </React.Fragment>    )}export default MovieDetailed